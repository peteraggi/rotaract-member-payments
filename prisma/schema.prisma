// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  user_id         Int             @id @default(autoincrement())
  email           String          @unique @db.VarChar(64)
  fullName        String          @db.VarChar(24)
  phone_number    String?         @unique @db.VarChar(16)
  gender          String?
  club_name       String?
  country         String?         @db.VarChar(50)
  district        String?         @db.VarChar(20)
  designation     String?         @db.VarChar(30)
  t_shirt_size    String?         @db.VarChar(5)
  dietary_needs   String?         @db.VarChar(20)
  special_medical_conditions String? @db.VarChar(100)
  accommodation   String?         @db.VarChar(100)
  otp             String?
  otpExpiresAt    DateTime?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  // Bank of Uganda required fields
  reference_number      String?       @unique @db.VarChar(30)
  system_unique_id      String?       @unique @db.VarChar(64)
  operation_type        Int?          @default(0)
  transaction_timestamp BigInt?
  account_id            String?       @db.VarChar(20)
  account_category_code String?       @db.VarChar(5)
  nin_number            String?      @db.VarChar(20)
  date_of_birth         BigInt?
  account_status        Int?          @default(0)
  
  // Relations
  registrations   Registration[]
  payments        Payment[] 
  
  @@index([email])
  @@index([phone_number])
  @@index([club_name])
  @@index([district])
  @@map("user")
}

model Registration {
  id                  Int       @id @default(autoincrement())
  user_id             Int
  user                User      @relation(fields: [user_id], references: [user_id])
  registration_status String    @default("pending")
  amount_paid         Float     @default(0)
  balance             Float     @default(0)
  total_amount        Float     @default(0)
  payment_status      String    @default("pending")
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  
  // Relations
  payments            Payment[]
  
  @@index([user_id])
  @@index([registration_status])
  @@index([payment_status])
  @@map("registration")
}

model Payment {
  id                          Int       @id @default(autoincrement())
  user_id         Int
  user            User            @relation(fields: [user_id], references: [user_id])
  registration_id             Int
  registration                Registration @relation(fields: [registration_id], references: [id])
  amount                      Float?
  payment_method              String?
  transaction_id              String?   @unique
  status                      String?    @default("pending")
  phone_number                String?
  
  // BOU Fields
  reference_number            String?    @unique
  entry_type                  String?
  purpose_code                Int?
  transaction_datetime        DateTime?
  initiator_account_id        String?
  second_party_account_id     String?
  transfer_value              Int?
  emoney_issuer_code          String?
  message_category            String?
  off_network                 Int?
  initiator_access_type       String?
  initiator_country_code      String?
  second_party_country_code   String?
  transfer_description        String?
  
  created_at                  DateTime  @default(now())
  
  @@index([registration_id])
  @@index([transaction_id])
  @@index([reference_number])
  @@map("payment")
}

model DailyTransactionCounter {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique @default(now())
  counter   Int      @default(1)
  
  @@map("daily_transaction_counter")
}

model LiquidationRequest {
  id              String   @id @default(uuid())
  amount          Float
  paymentMethod   String
  bankName        String?
  accountNumber   String?
  accountName     String
  mobileNumber    String?
  network         String?
  reason          String
  disbursementDate DateTime
  status          String   @default("pending")
  requesterId     String
  requesterName   String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([requesterId])
  @@index([status])
  @@map("liquidation_request")
}

model ReminderLog {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique // One reminder log per user
  lastSent  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reminder_logs")
}